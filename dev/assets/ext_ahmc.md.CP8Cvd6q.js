import{_ as s,c as i,o as a,a6 as e}from"./chunks/framework.iQWzBMw_.js";const g=JSON.parse('{"title":"AdvancedHMC Extension","description":"","frontmatter":{},"headers":[],"relativePath":"ext/ahmc.md","filePath":"ext/ahmc.md","lastUpdated":null}'),t={name:"ext/ahmc.md"},n=e(`<h1 id="AdvancedHMC-Extension" tabindex="-1">AdvancedHMC Extension <a class="header-anchor" href="#AdvancedHMC-Extension" aria-label="Permalink to &quot;AdvancedHMC Extension {#AdvancedHMC-Extension}&quot;">​</a></h1><p>The first choice when sampling from the model/image posterior, is <a href="https://github.com/TuringLang/AdvancedHMC.jl" target="_blank" rel="noreferrer"><code>AdvancedHMC</code></a>, which uses Hamiltonian Monte Carlo to sample from the posterior. Specifically, we usually use the <code>NUTS</code> algorithm.</p><p>The interface to <code>AdvancedHMC</code> is very powerful and general. To simplify the procedure for <code>Comrade</code> users, we have provided a thin interface. A user needs to specify a <code>sampler</code> and then call the <code>sample</code> function.</p><p>To sample a user can use follow the standard <code>AdvancedHMC</code> interface, e.g.,</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">chain </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> sample</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(post, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NUTS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10_000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; n_adapts</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5_000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>In addition our sample call has a few additional keyword arguments:</p><ul><li><p><code>adtype = Val(:Zygote)</code>: The autodiff package to use. Currently the default is <code>Zygote</code> and we recommend using this. Note that you must load Zygote before calling <code>sample</code>.</p></li><li><p><code>saveto = MemoryStore()</code>: Specifies how to store the samples. The default is <code>MemoryStore</code> which stores the samples directly in RAM. For large models this is not a good idea. To save samples periodically to disk use <a href="/Comrade.jl/dev/api#Comrade.DiskStore"><code>DiskStore</code></a>, and then load the results with <code>load_samples</code>.</p></li></ul><p>Note that like most <code>AbstractMCMC</code> samplers the initial location can be specified with the <code>initial_params</code> argument.</p><h2 id="Example" tabindex="-1">Example <a class="header-anchor" href="#Example" aria-label="Permalink to &quot;Example {#Example}&quot;">​</a></h2><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Comrade</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AdvancedHMC</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Zygote</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Some stuff to create a posterior object</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">post </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># of type Comrade.Posterior</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">out </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> sample</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(post, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NUTS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.9</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2_000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; n_adapts</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1_000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, saveto</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">DiskStore</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">chain </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> load_samples</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(out)</span></span></code></pre></div>`,10),l=[n];function h(p,d,o,r,k,c){return a(),i("div",null,l)}const y=s(t,[["render",h]]);export{g as __pageData,y as default};
